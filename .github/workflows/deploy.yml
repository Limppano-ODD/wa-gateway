name: Deploy Application
on:
  push:
    branches:
      - master
      - hml
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'hml'
        type: choice
        options:
          - hml
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

defaults:
  run:
    working-directory: /tmp

jobs:
  set-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      runner: ${{ steps.set-env.outputs.runner }}
    steps:
      - name: Set environment based on trigger
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            if [ "${{ github.event.inputs.environment }}" == "production" ]; then
              echo "runner=dockerprod" >> $GITHUB_OUTPUT
            else
              echo "runner=dockerhml" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "runner=dockerprod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/hml" ]; then
            echo "environment=hml" >> $GITHUB_OUTPUT
            echo "runner=dockerhml" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy to ${{ needs.set-environment.outputs.environment }}
    needs: set-environment
    runs-on: ${{ needs.set-environment.outputs.runner }}
    environment: ${{ needs.set-environment.outputs.environment }}
    env:
      PROJECT_DIR: /app/${{ github.event.repository.name }}
      NODE_ENV: ${{ vars.NODE_ENV }}
      WEBHOOK_BASE_URL: ${{ vars.WEBHOOK_BASE_URL }}
      ADMIN_USER: ${{ vars.ADMIN_USER }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      DB_PATH: ${{ vars.DB_PATH }}
      PORT: ${{ vars.PORT }}
    steps:
      - name: Ensure project directory exists and clean
        run: |
          echo "Ensuring directory exists: $PROJECT_DIR"
          mkdir -p "$PROJECT_DIR"
          echo "Cleaning directory: $PROJECT_DIR"
          rm -rf "$PROJECT_DIR"/* "$PROJECT_DIR"/.git "$PROJECT_DIR"/.[!.]* 2>/dev/null || true
          ls -la "$PROJECT_DIR"

      - name: Checkout do código
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Copy code to project directory
        run: |
          echo "Copying code from $GITHUB_WORKSPACE to $PROJECT_DIR"
          rsync -av --exclude='.git' "$GITHUB_WORKSPACE/" "$PROJECT_DIR/"
          echo "Files copied successfully"
          ls -la "$PROJECT_DIR" | head -20

      - name: Fazer deploy via Docker Compose
        id: deploy
        run: |
          cd "$PROJECT_DIR"
          echo "Iniciando deploy ${{ needs.set-environment.outputs.environment }}"
          echo "Diretório de trabalho: $(pwd)"
          ls -la docker-compose.yml || echo "⚠️ docker-compose.yml não encontrado!"
          docker compose up -d --build

      - name: Health check após deploy
        run: |
          echo "Aguardando aplicação ${{ needs.set-environment.outputs.environment }} ficar saudável..."
          for i in {1..30}; do
            if curl -f -s http://localhost:3002/ > /dev/null; then
              echo "✅ Aplicação ${{ needs.set-environment.outputs.environment }} está saudável"
              break
            fi
            echo "⏳ Aguardando aplicação ${{ needs.set-environment.outputs.environment }} ficar saudável... ($i/30)"
            sleep 10
          done

          if [ $i -eq 30 ]; then
            echo "❌ Falha no health check após deploy ${{ needs.set-environment.outputs.environment }}"
            echo "📊 Status dos containers:"
            cd "$PROJECT_DIR"
            docker compose ps
            echo "📋 Logs do serviço ${{ github.event.repository.name }}:"
            docker compose logs ${{ github.event.repository.name }} --tail=100
            exit 1
          fi

      - name: Notificar sucesso do deploy
        if: success()
        run: |
          cd "$PROJECT_DIR"
          echo "✅ Deploy ${{ needs.set-environment.outputs.environment }} realizado com sucesso!"
          echo "📊 Status final dos containers:"
          docker compose ps

      - name: Rollback em caso de falha
        if: failure()
        run: |
          cd "$PROJECT_DIR"
          echo "❌ Deploy ${{ needs.set-environment.outputs.environment }} falhou, iniciando rollback..."
          echo "📋 Logs antes do rollback:"
          docker compose logs ${{ github.event.repository.name }} --tail=50
          docker compose down
          docker compose up -d --no-build
          echo "🔄 Rollback ${{ needs.set-environment.outputs.environment }} concluído"
